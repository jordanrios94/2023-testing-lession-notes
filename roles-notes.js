[{"content":"## Welcome to RTLBook\n\nThis is an interactive coding environment where you can explore the following libraries:\n\n| Name      | Docs |\n| ----------- | ----------- |\n| React      | [docs](https://reactjs.org/)       |\n| @testing-library/react   |  [docs](https://testing-library.com/docs/react-testing-library/intro/)        |\n| @testing-library/user-event |   [docs](https://testing-library.com/docs/user-event/intro)  |\n| @testing-library/react-hooks |  [docs](https://github.com/testing-library/react-hooks-testing-library)  |\n| @testing-library/jest-dom | [docs](https://github.com/testing-library/jest-dom#custom-matchers) |\n| expect |  [docs](https://jestjs.io/docs/expect)  |\n\nIn between each 'cell' there are buttons that can add in a new code editor or a text section.","type":"text","id":"12frm"},{"content":"## Selecting Elements By Role\n\nSelecting elements based upon their role is the preferred way of testing elements with React Testing Library.  We use role selectors instead of more classic ways of finding elements, like CSS selectors.\n\nARIA (Accessible Rich Internet Applications) is a set of attributes that can be added to HTML elements to help make web applications more accessible to users with disabilities. These attributes provide additional information about the purpose and behavior of an element, which can be used by assistive technologies such as screen readers to improve the user experience.\n\nEven though these ARIA roles are an additional topic to memorize, we engineers use them because they allow us to write more flexible tests.  In many cases it doesn't matter if an element is presenting text in an `h1` element or an `h3` element.  By finding elements based on their role, we can make small changes to a component and not break its respective test.  Some engineers do not care for this flexibility.  If you don't wish to use ARIA roles, you can always fall back to using standard CSS selectors.\n\nSome elements - not all - are 'implicitly' (or automatically) assigned a role.  Some of the more commonly-used roles can be found in the `RoleExample` component below.","type":"text","id":"ijnuo"},{"content":"import { render, screen } from '@testing-library/react';\n\nfunction RoleExample() {\n  return (\n    <div>\n      <a href=\"/\">Link</a>\n      <button>Button</button>\n      <footer>Contentinfo</footer>\n      <h1>Heading</h1>\n      <header>Banner</header>\n      <img alt=\"description\" /> Img\n      <input type=\"checkbox\" /> Checkbox \n      <input type=\"number\" /> Spinbutton\n      <input type=\"radio\" /> Radio\n      <input type=\"text\" /> Textbox\n      <li>Listitem</li>\n      <ul>Listgroup</ul>\n    </div>\n  )\n}\n\nrender(<RoleExample />);","type":"code","id":"qnz4c"},{"content":"test('can find elements by role', () => {\n  render(<RoleExample />);\n\n  const roles = [\n    'link',\n    'button',\n    'contentinfo',\n    'heading',\n    'banner',\n    'img',\n    'checkbox',\n    'spinbutton',\n    'radio',\n    'textbox',\n    'listitem',\n    'list',\n  ];\n\n  for (let role of roles) {\n    const el = screen.getByRole(role);\n\n    expect(el).toBeInTheDocument();\n  }\n});","type":"code","id":"96h4y"},{"content":"function AccessibleName() {\n  return (\n    <div>\n      <button>Submit</button>\n      <button>Cancel</button>\n    </div>\n  )\n}\n\nrender(<AccessibleName />);","type":"code","id":"cqke8"},{"content":"test('can select by accessible name', () => {\n  render(<AccessibleName />);\n\n  const submitButton = screen.getByRole('button', {\n    name: /submit/i\n  });\n\n  const cancelButton = screen.getByRole('button', {\n    name: /cancel/i\n  });\n\n  expect(submitButton).toBeInTheDocument();\n  expect(cancelButton).toBeInTheDocument();\n});","type":"code","id":"9oz06"},{"content":"function MoreNames() {\n  return (\n    <div>\n      <label htmlFor=\"email\">Email</label>\n      <input id=\"email\" />\n      <label htmlFor=\"search\">Search</label>\n      <input id=\"search\" />\n    </div>\n  );\n}\n\nrender(<MoreNames />);","type":"code","id":"e4rus"},{"content":"test('shows an email and search input', () => {\n  render(<MoreNames />);\n\n  const emailInput = screen.getByRole('textbox', {\n    name: /email/i\n  });\n  const searchInput = screen.getByRole('textbox', {\n    name: /search/i\n  });\n\n  expect(emailInput).toBeInTheDocument();\n  expect(searchInput).toBeInTheDocument();\n});","type":"code","id":"rfjm3"},{"content":"function IconButtons() {\n  return (\n    <div>\n      <button aria-label=\"sign in\">\n        <svg />\n      </button>\n\n      <button aria-label=\"sign out\">\n        <svg />\n      </button>\n    </div>\n  );\n}\n\nrender(<IconButtons />);","type":"code","id":"qrzux"},{"content":"test('find elements based on label', () => {\n  render(<IconButtons />);\n\n  const signInButton = screen.getByRole('button', {\n    name: /sign in/i\n  });\n  const signOutButton = screen.getByRole('button', {\n    name: /sign out/i\n  });\n\n  expect(signInButton).toBeInTheDocument();\n  expect(signOutButton).toBeInTheDocument();\n});","type":"code","id":"illzs"}]